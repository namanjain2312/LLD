Functional Requirements
    a>Users can rate a product from 1 to 5 stars.
    b>Users can update their rating.
    c>Get average rating of a product.
    d>Support product and user lookup.

Core Entities
    a>User
        userId
        name
    b>Product
        productId
        name
        description
    c>Rating
        ratingId
        userId
        productId
        ratingValue (1-5)
        timestamp

Product
    productId
    name
    Map<String,Rating> ratingMap //userId vs Rating
    double averageRating

Rating
    user
    product
    int ratingValue

RatingService
    rateProduct(user, product, rating)
    getAverageRating(product)
    getRatingsByProduct(product)
    getUserRating(user, product)


1>Optimize getAverageRating() â€“ from O(n) to O(1)
Instead of computing the average each time by iterating through all ratings (which is O(n)),
you can maintain two fields:
private int totalRatingValue = 0;
private int totalRatingCount = 0;

2>To reduce addOrUpdateRating to O(1), you could maintain a Map<String, Rating> (userId to Rating)
instead of a List<Rating> , otherwise for now we are using O(n) time complexity
